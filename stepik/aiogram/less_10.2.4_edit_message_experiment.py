"""
–° –≤–µ—Ä—Å–∏–∏ aiogram 3.0.0b8:
@dp.message(Text(text='more'))          ->  @dp.message(F.text == 'more')
@dp.callback_query(Text(text='more'))   ->  @dp.callback_query(F.data == 'more')
@dp.callback_query(Text(text=['text', 'audio', 'video', 'document', 'photo', 'voice'])) ->
@dp.callback_query(F.data.in_({'text', 'audio', 'video', 'document', 'photo', 'voice'}))
"""
from aiogram import Bot, Dispatcher, F
from aiogram.types import (Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
                           InputMediaAudio, InputMediaDocument, InputMediaPhoto, InputMediaVideo)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

from config_data.config import Config, load_config

config: Config = load_config()
bot: Bot = Bot(token=config.tg_bot.token)
dp: Dispatcher = Dispatcher()

LEXICON: dict[str, str] = {
    'audio': 'üé∂ –ê—É–¥–∏–æ',
    'text': 'üìÉ –¢–µ–∫—Å—Ç',
    'photo1': 'üñº –§–æ—Ç–æ',
    'photo2': 'üñº –§–æ—Ç–æ',
    'video': 'üé¨ –í–∏–¥–µ–æ',
    'document': 'üìë –î–æ–∫—É–º–µ–Ω—Ç',
    'voice': 'üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    'text_1': '–≠—Ç–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º,'
              '–Ω–æ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –º–µ–¥–∏–∞.',
    'text_2': '–≠—Ç–æ —Ç–æ–∂–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,'
              '–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.',
    'photo_id1': 'AgACAgIAAxkBAAIEGmTP8ccEkIpFo_fYihJnOAABx4A9lQAC7dIxGwNYgUqX0PpHWp5NeAEAAwIAA3MAAzAE',
    'photo_id2': 'AgACAgIAAxkBAAIEHGTP8k_DJNaHgzeDkc3g0rwWnvZmAAIC0zEbA1iBSoiKhpOkTFRPAQADAgADcwADMAQ',
    'voice_id1': 'AwACAgIAAxkBAAIEKmTP9Vy75QRsMNhK1_aiuG-GmtQZAAK_NgACA1iBSjgy3oWkgHxIMAQ',
    'voice_id2': 'AwACAgIAAxkBAAIELGTP9XnMH0hDJpVmUvzlLvxb_lfhAALCNgACA1iBSh4LM7lM7RTVMAQ',
    'audio_id1': 'CQACAgIAAxkBAAIEHmTP9CzkZEKP2Dp0YyHHqRmyko6cAAKsNgACA1iBSkcj8d-aqv10MAQ',
    'audio_id2': 'CQACAgIAAxkBAAIEIGTP9FCqgHMnhAABignJluiQQz-xEQACrTYAAgNYgUp_Zx9XeTFMFTAE',
    'document_id1': 'BQACAgIAAxkBAAIEImTP9HWZ1Ppr_Edd2fkJHllOHo3oAAKwNgACA1iBSuxaWCLQ-0YLMAQ',
    'document_id2': 'BQACAgIAAxkBAAIEJGTP9JFW4wubsEoCpbwoPz7tcNxLAAKyNgACA1iBSnZSGPg_ENVJMAQ',
    'video_id1': 'BAACAgIAAxkBAAIEJmTP9M5DuAWFjoKkKEAgr76LcKLmAAK1NgACA1iBSmJVGlnyfNIpMAQ',
    'video_id2': 'BAACAgIAAxkBAAIEKGTP9SaN_9EG4yWDoPtCDgxETSY9AAK7NgACA1iBSuWGxtbqdKplMAQ'}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
def get_markup(*args, **kwargs) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))
    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(text=text, callback_data=button))
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=1)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏
    buttons.append(InlineKeyboardButton(
        text=f'{LEXICON["text"]} > {LEXICON["text"]}',
        callback_data='text_to_text'))
    buttons.append(InlineKeyboardButton(
        text=f'{LEXICON["text"]} > {LEXICON["photo1"]}',
        callback_data='text_to_photo'))
    buttons.append(InlineKeyboardButton(
        text=f'{LEXICON["photo1"]} > {LEXICON["photo2"]}',
        callback_data='photo_to_photo'))
    buttons.append(InlineKeyboardButton(text=LEXICON['audio'], callback_data='start_audio'))
    buttons.append(InlineKeyboardButton(text=LEXICON['video'], callback_data='start_video'))
    buttons.append(InlineKeyboardButton(text=LEXICON['document'], callback_data='start_document'))
    buttons.append(InlineKeyboardButton(text=LEXICON['voice'], callback_data='start_voice'))
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=1)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è', reply_markup=kb_builder.as_markup())


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "text_to_text"
@dp.callback_query(F.data == 'text_to_text')
async def process_text_to_text_command(callback: CallbackQuery):
    markup = get_markup('text')
    await callback.message.answer(text=LEXICON['text_1'], reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "text_to_photo"
@dp.callback_query(F.data == 'text_to_photo')
async def process_text_to_photo_command(callback: CallbackQuery):
    markup = get_markup('photo1')
    await callback.message.answer(text=LEXICON['text_1'], reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "photo_to_photo"
@dp.callback_query(F.data == 'photo_to_photo')
async def process_photo_to_photo_command(callback: CallbackQuery):
    markup = get_markup('photo2')
    await callback.message.answer_photo(photo=LEXICON['photo_id1'], caption='–≠—Ç–æ —Ñ–æ—Ç–æ 1', reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.in_({'text', 'photo1', 'photo2', 'audio', 'video', 'document', 'voice'}))
async def process_button_press(callback: CallbackQuery, bot: Bot):
    match callback.data:
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
        case 'text':
            markup = get_markup('text')
            if callback.message.text == LEXICON['text_1']:
                text = LEXICON['text_2']
            else:
                text = LEXICON['text_1']
            await callback.message.edit_text(text=text, reply_markup=markup)
        case 'photo1':
            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ–¥–∏–∞. –ë—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:
            # aiogram.exceptions.TelegramBadRequest:
            # Telegram server says Bad Request: there is no media in the message to edit
            markup = get_markup('photo1')
            await bot.edit_message_media(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                media=InputMediaPhoto(media=LEXICON['photo_id1'], caption='–≠—Ç–æ —Ñ–æ—Ç–æ 1'),
                reply_markup=markup)
        case 'photo2':
            # –ú–µ–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ
            markup = get_markup('photo2')
            try:
                await bot.edit_message_media(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    media=InputMediaPhoto(media=LEXICON['photo_id2'], caption='–≠—Ç–æ —Ñ–æ—Ç–æ 2'),
                    reply_markup=markup)
            except TelegramBadRequest:
                await bot.edit_message_media(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    media=InputMediaPhoto(media=LEXICON['photo_id1'], caption='–≠—Ç–æ —Ñ–æ—Ç–æ 1'),
                    reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥,
# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏ –≤—ã—à–µ
@dp.message()
async def send_echo(message: Message):
    print(message)
    await message.answer(text='–ù–µ –ø–æ–Ω–∏–º–∞—é')


if __name__ == '__main__':
    dp.run_polling(bot)
